
name: 'Terraform'

run-name: Plan-${{ github.sha }}-${{ github.actor }}


on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.APP_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.SPN_PASS }}
  ARM_TENANT_ID: ${{ secrets.TENANT }}
  TF_VERSION: 1.8.0


jobs:
  apply:
    strategy:
      fail-fast: false
      matrix:
        include:
          - subscription_id: "55b24198-da47-4df9-a82d-aa987405a685"
          - subscription_id: "62c3872c-6679-48dc-8f52-a023c76c87b4"
    env:
      Greeting: Hello
      

    name: 'Plan'

    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Azure credentials
      run: |
        echo "ARM_SUBSCRIPTION_ID=${{ matrix.subscription_id }}" >> $GITHUB_ENV

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

